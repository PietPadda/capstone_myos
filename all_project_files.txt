; myos/boot/bootloader.asm
; A bootloader that loads a kernel, enters 32-bit protected mode,
; and then jumps to the kernel.

org 0x7C00
bits 16

GDT_NULL equ 0
GDT_CODE equ 0x8
GDT_DATA equ 0x10

start:
    mov bh, dl      ; BIOS stores boot drive in DL, save it in BH

    ; Set up segments to a known state (0)
    xor ax, ax
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x7C00  ; Set stack pointer below our code

    ; --- Reset disk system ---
    mov ah, 0x00
    mov dl, bh
    int 0x13
    jc disk_error

    ; --- Load Kernel from Disk into memory address 0x10000 ---
    mov ax, 0x1000      ; Set ES to 0x1000. ES:BX = 0x1000:0x0000 = 0x10000
    mov es, ax
    xor bx, bx          ; BX = 0

    mov ah, 0x02        ; BIOS read sectors function
    mov al, 10          ; Read 10 sectors (5 KB)
    mov ch, 0x00        ; Cylinder 0
    mov cl, 0x02        ; Sector 2 (Kernel starts after boot sector)
    mov dh, 0x00        ; Head 0
    mov dl, bh          ; Use the saved boot drive number
    int 0x13
    jc disk_error
    cmp al, 10          ; Verify number of sectors read
    jne disk_error

    ; --- Enter Protected Mode ---
    cli                 ; 1. Disable interrupts
    lgdt [cs:gdt_descriptor] ; 2. Load the GDT descriptor

    mov eax, cr0        ; 3. Set the PE bit in CR0
    or eax, 0x1
    mov cr0, eax

    ; 4. Far jump to our 32-bit code to flush the pipeline
    jmp GDT_CODE:start_32bit

disk_error:
    mov si, msg_disk_error
print_error_loop:
    lodsb
    or al, al
    jz hang
    mov ah, 0x0E
    int 0x10
    jmp print_error_loop

hang:
    cli
    hlt

; =======================================================
; ### 32-BIT PROTECTED MODE CODE ###
; =======================================================
bits 32
start_32bit:
    ; Set up 32-bit segment registers
    mov ax, GDT_DATA    ; 0x10
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax

    ; Set up the stack
    mov esp, 0x90000

    ; Jump to the kernel's entry point
    jmp 0x10000

; =======================================================
; ### DATA SECTION ###
; =======================================================
gdt_descriptor:
    dw gdt_end - gdt_start - 1 ; GDT limit
    dd gdt_start               ; GDT base

gdt_start:
    ; Null descriptor
    dq 0x0

    ; Code segment descriptor (base=0, limit=4GB, 32-bit, Ring 0)
    dw 0xFFFF       ; Limit (low)
    dw 0x0          ; Base (low)
    db 0x0          ; Base (mid)
    db 10011010b    ; Access byte
    db 11001111b    ; Granularity and limit (high)
    db 0x0          ; Base (high)

    ; Data segment descriptor (base=0, limit=4GB, 32-bit, Ring 0)
    dw 0xFFFF       ; Limit (low)
    dw 0x0          ; Base (low)
    db 0x0          ; Base (mid)
    db 10010010b    ; Access byte
    db 11001111b    ; Granularity and limit (high)
    db 0x0          ; Base (high)
gdt_end:

msg_disk_error:
    db 'Disk read error!', 0

; =======================================================
; ### BOOT SIGNATURE ###
; =======================================================
times 510 - ($ - $$) db 0
dw 0xAA55// myos/kernel/exceptions.h

#ifndef EXCEPTIONS_H
#define EXCEPTIONS_H

#include "types.h"

// A struct which defines the registers we pushed onto the stack in isr.asm.
// This order MUST match the order of the push instructions in isr.asm.
typedef struct {
    // Pushed by us manually
    uint32_t gs, fs, es, ds;
    
    // Pushed by the 'pusha' instruction
    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax;

    // Pushed by our ISR stub (int_no first, then error code)
    uint32_t int_no, err_code;

    // Pushed by the processor automatically on interrupt
    uint32_t eip, cs, eflags, useresp, ss;
} __attribute__((packed)) registers_t;

void isr_install();
void fault_handler(registers_t *r);

#endif// myos/kernel/io.c

#include "io.h"

#define PIC1_CMD  0x20
#define PIC1_DATA 0x21
#define PIC2_CMD  0xA0
#define PIC2_DATA 0xA1

// Writes a byte to the specified I/O port.
void port_byte_out(unsigned short port, unsigned char data) {
    __asm__ __volatile__("outb %0, %1" : : "a"(data), "Nd"(port));
}

// Reads a byte from the specified I/O port.
unsigned char port_byte_in(unsigned short port) {
    unsigned char result;
    __asm__ __volatile__("inb %1, %0" : "=a"(result) : "Nd"(port));
    return result;
}

/**
 * Remaps the PIC to use non-conflicting interrupt vectors.
 * @param offset1 Vector offset for master PIC (e.g., 0x20)
 * @param offset2 Vector offset for slave PIC (e.g., 0x28)
 */
void pic_remap(int offset1, int offset2) {
    // Save current masks
    unsigned char a1 = port_byte_in(PIC1_DATA);
    unsigned char a2 = port_byte_in(PIC2_DATA);

    // ICW1: Start the initialization sequence
    port_byte_out(PIC1_CMD, 0x11);
    port_byte_out(PIC2_CMD, 0x11);

    // ICW2: Set the vector offsets
    port_byte_out(PIC1_DATA, offset1);
    port_byte_out(PIC2_DATA, offset2);

    // ICW3: Configure chaining between master and slave
    port_byte_out(PIC1_DATA, 4);  // Tell Master PIC there is a slave at IRQ2
    port_byte_out(PIC2_DATA, 2);  // Tell Slave PIC its cascade identity

    // ICW4: Set 8086 mode
    port_byte_out(PIC1_DATA, 0x01);
    port_byte_out(PIC2_DATA, 0x01);

    // Restore saved masks
    port_byte_out(PIC1_DATA, a1);
    port_byte_out(PIC2_DATA, a2);
}// myos/kernel/shell.h

#ifndef SHELL_H
#define SHELL_H

// Initializes the shell.
void shell_init();

// Handles a single character of input.
void shell_handle_input(char c);

#endif// myos/kernel/keyboard.c

#include "keyboard.h"
#include "irq.h"
#include "io.h"
#include "shell.h" // Changed from vga.h
#include "vga.h"

// --- State and Character Maps ---
static volatile int shift_pressed = 0;

// Scancode set 1 for a US QWERTY keyboard layout - Normal
// A 0 means the key is not printable.
unsigned char kbd_us[128] = {
    0,  27, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', '\b',
    '\t', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\n',
    0, 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\'', '`', 0,
    '\\', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 0, '*', 0,
    ' ', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '-', 0, 0, 0, '+',
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

// Scancode set 1 for a US QWERTY keyboard layout - Shifted
unsigned char kbd_us_shift[128] = {
    0,  27, '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '\b',
    '\t', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', '\n',
    0, 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '"', '~', 0,
    '|', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 0, '*', 0,
    ' ', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '-', 0, 0, 0, '+',
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

// The main keyboard handler function, called by our IRQ dispatcher.
static void keyboard_handler(registers_t *r) {
    unsigned char scancode = port_byte_in(0x60);

    // Handle a key release first
    if (scancode & 0x80) {
        // If a shift key was released, update the flag.
        if ((scancode & 0x7F) == 0x2A || (scancode & 0x7F) == 0x36) {
            shift_pressed = 0;
        }
        return; // Nothing more to do on key release.
    }

    // Handle a key press
    // If it's a shift key, update the flag and exit.
    if (scancode == 0x2A || scancode == 0x36) {
        shift_pressed = 1;
        return;
    }

    // If we're still here, it must be a normal character key.
    if (scancode < 128) {
        char character = shift_pressed ? kbd_us_shift[scancode] : kbd_us[scancode];
        if (character) {
            shell_handle_input(character);
        }
    }
}

// The installation function that hooks the handler into the IRQ system.
void keyboard_install() {
    // Register `keyboard_handler` to be called when IRQ 1 is triggered.
    irq_install_handler(1, keyboard_handler);
}// myos/kernel/keyboard.h

#ifndef KEYBOARD_H
#define KEYBOARD_H

// Initializes the keyboard driver and registers its IRQ handler.
void keyboard_install();

#endif// myos/kernel/irq.c

#include "irq.h"
#include "io.h"
#include "vga.h"

// Array of function pointers for handling custom IRQ handlers
static void *irq_routines[16] = {0};

// Install a custom handler for a given IRQ
void irq_install_handler(int irq, void (*handler)(registers_t *r)) {
    irq_routines[irq] = handler;
}

// Clear a handler for a given IRQ
void irq_uninstall_handler(int irq) {
    irq_routines[irq] = 0;
}

// The main IRQ handler, called from our assembly stub
void irq_handler(registers_t *r) {
    void (*handler)(registers_t *r);

    // Find the handler for this IRQ number
    handler = irq_routines[r->int_no - 32];
    if (handler) {
        handler(r);
    }

    // Send the EOI (End of Interrupt) signal to the PICs
    if (r->int_no >= 40) {
        port_byte_out(0xA0, 0x20); // Send EOI to slave PIC
    }
    port_byte_out(0x20, 0x20); // Send EOI to master PIC
}// myos/kernel/idt.c

#include "idt.h"

// Forward-declarations for our 32 ISR stubs in isr.asm
extern void isr0(); extern void isr1(); extern void isr2(); extern void isr3(); 
extern void isr4(); extern void isr5(); extern void isr6(); extern void isr7(); 
extern void isr8(); extern void isr9(); extern void isr10(); extern void isr11(); 
extern void isr12(); extern void isr13(); extern void isr14(); extern void isr15(); 
extern void isr16(); extern void isr17(); extern void isr18(); extern void isr19(); 
extern void isr20(); extern void isr21(); extern void isr22(); extern void isr23(); 
extern void isr24(); extern void isr25(); extern void isr26(); extern void isr27(); 
extern void isr28(); extern void isr29(); extern void isr30(); extern void isr31();

// Forward-declarations for our 16 IRQ stubs in isr.asm
extern void irq0(); extern void irq1(); extern void irq2(); extern void irq3();
extern void irq4(); extern void irq5(); extern void irq6(); extern void irq7();
extern void irq8(); extern void irq9(); extern void irq10(); extern void irq11();
extern void irq12(); extern void irq13(); extern void irq14(); extern void irq15();

// Declare our IDT with 256 entries.
struct idt_entry_struct idt_entries[256];
struct idt_ptr_struct   idt_ptr;

// This is our new, self-contained function to load the IDT.
static inline void idt_load_inline(struct idt_ptr_struct* idt_ptr) {
    __asm__ __volatile__("lidt %0" : : "m"(*idt_ptr));
}

/**
 * Sets a single gate (entry) in the IDT.
 * @param num The interrupt number (0-255).
 * @param base The address of the interrupt handler function.
 * @param selector The GDT code segment selector to use.
 * @param flags The flags for this gate (e.g., present, priority).
 */
void idt_set_gate(uint8_t num, uint32_t base, uint16_t selector, uint8_t flags) {
    idt_entries[num].base_low    = base & 0xFFFF;
    idt_entries[num].base_high   = (base >> 16) & 0xFFFF;
    idt_entries[num].selector    = selector;
    idt_entries[num].always0     = 0;
    // We must uncomment the OR below when we add the interrupt handlers.
    idt_entries[num].flags       = flags /* | 0x60 */;
}

/**
 * Initializes the IDT and loads it.
 */
void idt_install() {
    // Set the IDT pointer struct's values
    idt_ptr.limit = (sizeof(struct idt_entry_struct) * 256) - 1;
    idt_ptr.base  = (uint32_t)&idt_entries;

    // For now, clear the entire IDT by pointing all entries to nothing.
    // In later steps, we'll replace these with actual handlers.
    for (int i = 0; i < 256; i++) {
        idt_set_gate(i, 0, 0, 0);
    }
    
    // Use Trap Gate flags (0x8F) for CPU exceptions!
    idt_set_gate(0, (uint32_t)isr0, 0x08, 0x8F);
    idt_set_gate(1, (uint32_t)isr1, 0x08, 0x8F);
    idt_set_gate(2, (uint32_t)isr2, 0x08, 0x8F);
    idt_set_gate(3, (uint32_t)isr3, 0x08, 0x8F);
    idt_set_gate(4, (uint32_t)isr4, 0x08, 0x8F);
    idt_set_gate(5, (uint32_t)isr5, 0x08, 0x8F);
    idt_set_gate(6, (uint32_t)isr6, 0x08, 0x8F);
    idt_set_gate(7, (uint32_t)isr7, 0x08, 0x8F);
    idt_set_gate(8, (uint32_t)isr8, 0x08, 0x8F);
    idt_set_gate(9, (uint32_t)isr9, 0x08, 0x8F);
    idt_set_gate(10, (uint32_t)isr10, 0x08, 0x8F);
    idt_set_gate(11, (uint32_t)isr11, 0x08, 0x8F);
    idt_set_gate(12, (uint32_t)isr12, 0x08, 0x8F);
    idt_set_gate(13, (uint32_t)isr13, 0x08, 0x8F);
    idt_set_gate(14, (uint32_t)isr14, 0x08, 0x8F);
    idt_set_gate(15, (uint32_t)isr15, 0x08, 0x8F);
    idt_set_gate(16, (uint32_t)isr16, 0x08, 0x8F);
    idt_set_gate(17, (uint32_t)isr17, 0x08, 0x8F);
    idt_set_gate(18, (uint32_t)isr18, 0x08, 0x8F);
    idt_set_gate(19, (uint32_t)isr19, 0x08, 0x8F);
    idt_set_gate(20, (uint32_t)isr20, 0x08, 0x8F);
    idt_set_gate(21, (uint32_t)isr21, 0x08, 0x8F);
    idt_set_gate(22, (uint32_t)isr22, 0x08, 0x8F);
    idt_set_gate(23, (uint32_t)isr23, 0x08, 0x8F);
    idt_set_gate(24, (uint32_t)isr24, 0x08, 0x8F);
    idt_set_gate(25, (uint32_t)isr25, 0x08, 0x8F);
    idt_set_gate(26, (uint32_t)isr26, 0x08, 0x8F);
    idt_set_gate(27, (uint32_t)isr27, 0x08, 0x8F);
    idt_set_gate(28, (uint32_t)isr28, 0x08, 0x8F);
    idt_set_gate(29, (uint32_t)isr29, 0x08, 0x8F);
    idt_set_gate(30, (uint32_t)isr30, 0x08, 0x8F);
    idt_set_gate(31, (uint32_t)isr31, 0x08, 0x8F);

    // Use Interrupt Gate flags (0x8E) for IRQs!
    idt_set_gate(32, (uint32_t)irq0, 0x08, 0x8E);
    idt_set_gate(33, (uint32_t)irq1, 0x08, 0x8E);
    idt_set_gate(34, (uint32_t)irq2, 0x08, 0x8E);
    idt_set_gate(35, (uint32_t)irq3, 0x08, 0x8E);
    idt_set_gate(36, (uint32_t)irq4, 0x08, 0x8E);
    idt_set_gate(37, (uint32_t)irq5, 0x08, 0x8E);
    idt_set_gate(38, (uint32_t)irq6, 0x08, 0x8E);
    idt_set_gate(39, (uint32_t)irq7, 0x08, 0x8E);
    idt_set_gate(40, (uint32_t)irq8, 0x08, 0x8E);
    idt_set_gate(41, (uint32_t)irq9, 0x08, 0x8E);
    idt_set_gate(42, (uint32_t)irq10, 0x08, 0x8E);
    idt_set_gate(43, (uint32_t)irq11, 0x08, 0x8E);
    idt_set_gate(44, (uint32_t)irq12, 0x08, 0x8E);
    idt_set_gate(45, (uint32_t)irq13, 0x08, 0x8E);
    idt_set_gate(46, (uint32_t)irq14, 0x08, 0x8E);
    idt_set_gate(47, (uint32_t)irq15, 0x08, 0x8E);

    // Load the IDT using our new inline assembly function
    idt_load_inline(&idt_ptr);
}// myos/kernel/kernel.c

// headers
#include "idt.h"
#include "vga.h"
#include "io.h"
#include "keyboard.h" // Include our new keyboard driver header
#include "timer.h" // Include our new timer driver header
#include "shell.h"

// Helper for debug prints
static inline void outb(unsigned short port, unsigned char data) {
    __asm__ __volatile__("outb %0, %1" : : "a"(data), "Nd"(port));
}

void kmain() {
    outb(0xE9, 'S');

    // Remap the PIC first to get the hardware into a stable state.
    pic_remap(0x20, 0x28); // Master PIC at 0x20, Slave at 0x28
    outb(0xE9, 'P');

    // Now, install our Interrupt Service Routines and load the IDT.
    idt_install();
    outb(0xE9, 'I');

    // Install the keyboard driver.
    keyboard_install();
    outb(0xE9, 'K');

    // Install the timer driver.
    timer_install(); // Install our new timer driver
    outb(0xE9, 'T');

    // clear the bios text
    clear_screen();

    // Initialize the shell
    shell_init();
    outb(0xE9, 's');

    // Enable interrupts! From this point on, the CPU will respond to hardware.
    __asm__ __volatile__ ("sti");

    // Hang the CPU. The keyboard handler will run when keys are pressed.
    // Use hlt to efficiently idle the CPU until an interrupt occurs.
    while (1) {
        __asm__ __volatile__("hlt");
    }
}; myos/kernel/isr.asm
bits 32

%macro ISR_NOERRCODE 1
global isr%1
isr%1:
    cli
    push dword 0
    push dword %1
    jmp isr_common_stub
%endmacro

%macro ISR_ERRCODE 1
global isr%1
isr%1:
    cli
    push dword %1
    jmp isr_common_stub
%endmacro

; --- Define the 32 exception handlers ---
ISR_NOERRCODE 0  ; 0: Divide By Zero Exception
ISR_NOERRCODE 1  ; 1: Debug Exception
ISR_NOERRCODE 2  ; 2: Non Maskable Interrupt Exception
ISR_NOERRCODE 3  ; 3: Breakpoint Exception
ISR_NOERRCODE 4  ; 4: Into Detected Overflow Exception
ISR_NOERRCODE 5  ; 5: Out of Bounds Exception
ISR_NOERRCODE 6  ; 6: Invalid Opcode Exception
ISR_NOERRCODE 7  ; 7: No Coprocessor Exception
ISR_ERRCODE   8  ; 8: Double Fault Exception (with error code)
ISR_NOERRCODE 9  ; 9: Coprocessor Segment Overrun Exception
ISR_ERRCODE   10 ; 10: Bad TSS Exception (with error code)
ISR_ERRCODE   11 ; 11: Segment Not Present Exception (with error code)
ISR_ERRCODE   12 ; 12: Stack Fault Exception (with error code)
ISR_ERRCODE   13 ; 13: General Protection Fault Exception (with error code)
ISR_ERRCODE   14 ; 14: Page Fault Exception (with error code)
ISR_NOERRCODE 15 ; 15: Unassigned Exception
ISR_NOERRCODE 16 ; 16: Coprocessor Fault Exception
ISR_ERRCODE   17 ; 17: Alignment Check Exception (with error code)
ISR_NOERRCODE 18 ; 18: Machine Check Exception
ISR_NOERRCODE 19 ; 19: SIMD Fault Exception
; Interrupts 20-31 are reserved by Intel.
ISR_NOERRCODE 20
ISR_NOERRCODE 21
ISR_NOERRCODE 22
ISR_NOERRCODE 23
ISR_NOERRCODE 24
ISR_NOERRCODE 25
ISR_NOERRCODE 26
ISR_NOERRCODE 27
ISR_NOERRCODE 28
ISR_NOERRCODE 29
ISR_NOERRCODE 30
ISR_NOERRCODE 31

; --- Define the 16 IRQ handlers ---
%macro IRQ 2
global irq%1
irq%1:
    cli
    push byte 0
    push byte %2  ; Push the interrupt number
    jmp irq_common_stub
%endmacro

; IRQs 0-15. Remember we remapped them to 32-47.
IRQ 0, 32   ; Timer
IRQ 1, 33   ; Keyboard
IRQ 2, 34   ; Cascade
IRQ 3, 35   ; COM2
IRQ 4, 36   ; COM1
IRQ 5, 37   ; LPT2
IRQ 6, 38   ; Floppy Disk
IRQ 7, 39   ; LPT1
IRQ 8, 40   ; CMOS real-time clock
IRQ 9, 41   ; Free for peripherals
IRQ 10, 42  ; Free for peripherals
IRQ 11, 43  ; Free for peripherals
IRQ 12, 44  ; PS2 Mouse
IRQ 13, 45  ; FPU
IRQ 14, 46  ; Primary ATA Hard Disk
IRQ 15, 47  ; Secondary ATA Hard Disk

; --- Common Assembly Stub ---
; All ISRs jump here after pushing their number and a (optional) error code
extern fault_handler ; This is our C-level handler
isr_common_stub:
    ; 1. Save the general purpose registers
    pusha

    ; 2. Save the segment registers
    mov eax, ds
    push eax
    mov eax, es
    push eax
    mov eax, fs
    push eax
    mov eax, gs
    push eax

    ; 3. Load kernel segments for the C handler to use
    mov ax, 0x10  ; 0x10 is our kernel data segment selector
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; 4. Push a pointer to the register block and call the C handler
    push esp
    call fault_handler

    ; 5. Clean up the pushed pointer from the stack
    add esp, 4

    ; 6. Restore the original segment registers
    pop eax
    mov gs, eax
    pop eax
    mov fs, eax
    pop eax
    mov es, eax
    pop eax
    mov ds, eax

    ; 7. Restore general purpose registers
    popa

    ; 8. Clean up error code & interrupt number, and return
    add esp, 8
    iret

; --- Common IRQ Stub ---
extern irq_handler ; Our new C-level IRQ handler
irq_common_stub:
    ; Save general purpose registers
    pusha

    ; Save segment registers
    mov eax, ds
    push eax
    mov eax, es
    push eax
    mov eax, fs
    push eax
    mov eax, gs
    push eax

    ; Load the kernel's data segment for C code
    mov ax, 0x10  ; 0x10 is our GDT data segment selector
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; Push a pointer to the registers and call the C handler
    push esp
    call irq_handler
    add esp, 4 ; Clean up the pushed pointer

    ; Restore original segment registers
    pop eax
    mov gs, eax
    pop eax
    mov fs, eax
    pop eax
    mov es, eax
    pop eax
    mov ds, eax

    ; Restore general purpose registers
    popa
    add esp, 8 ; Clean up the error code and interrupt number
    sti
    iret       ; Safely return from the interrupt
// myos/kernel/io.h

#ifndef IO_H
#define IO_H

void port_byte_out(unsigned short port, unsigned char data);
unsigned char port_byte_in(unsigned short port);
void pic_remap(int offset1, int offset2); // remapping interrupt vectors func

#endif; myos/kernel/kernel_entry.asm
bits 32

; Tell the assembler that 'kmain' is in another file
extern kmain

; Make '_start' visible to the linker
global _start

_start:
    ; The bootloader has already set up the segments and stack.
    ; We can now safely call our main C function.
    call kmain

    ; If kmain returns (which it shouldn't), hang the system.
    cli
hang:
    hlt
    jmp hang// myos/kernel/exceptions.c

#include "exceptions.h"
#include "vga.h"

// Helper function to print the names of the set EFLAGS bits
static void print_eflags(uint32_t eflags) {
    print_string(" [ ");
    if (eflags & 0x1) print_string("CF ");
    if (eflags & 0x4) print_string("PF ");
    if (eflags & 0x10) print_string("AF ");
    if (eflags & 0x40) print_string("ZF ");
    if (eflags & 0x80) print_string("SF ");
    if (eflags & 0x200) print_string("IF ");
    if (eflags & 0x400) print_string("DF ");
    print_string("]");
}

// Helper function to dump a section of the stack
static void dump_stack(uint32_t *stack_ptr) {
    print_string("\n\n-- STACK DUMP --\n");
    for (int i = 0; i < 16; ++i) {
        uint32_t value = stack_ptr[i];
        print_hex((uint32_t)&stack_ptr[i]);
        print_string(": ");
        print_hex(value);
        print_string("\n");
    }
}

// C-level handler for all exceptions
void fault_handler(registers_t *r) {
    clear_screen();

    print_string("CPU EXCEPTION CAUGHT! -- SYSTEM HALTED\n\n");
    print_string("Interrupt Number: ");
    print_hex(r->int_no);
    print_string("\nError Code:       ");
    print_hex(r->err_code);
    print_string("\n\n-- REGISTER DUMP --\n");
    print_string("EAX: "); print_hex(r->eax); print_string("  EBX: "); print_hex(r->ebx);
    print_string("\nECX: "); print_hex(r->ecx); print_string("  EDX: "); print_hex(r->edx);
    print_string("\nESI: "); print_hex(r->esi); print_string("  EDI: "); print_hex(r->edi);
    print_string("\n\n-- SEGMENT DUMP --\n");
    print_string("CS:  "); print_hex(r->cs);  print_string("     DS:  "); print_hex(r->ds);
    print_string("\nSS:  "); print_hex(r->ss);
    print_string("\n\n-- CONTROL DUMP --\n");
    print_string("EIP: "); print_hex(r->eip); 
    print_string("\nEFLAGS: "); print_hex(r->eflags);
    print_eflags(r->eflags);

    // Dump the stack. We use r->useresp for the stack pointer at the time of the fault.
    dump_stack((uint32_t *)r->useresp);

    for (;;);
}// myos/kernel/vga.h

#ifndef VGA_H
#define VGA_H

#include "types.h" // to include uint32_t

void clear_screen();
void update_cursor(int row, int col);
void print_string(const char* str);
void print_hex(uint32_t n);

#endif// myos/kernel/irq.h

#ifndef IRQ_H
#define IRQ_H

#include "types.h"
#include "exceptions.h" // For registers_t struct

void irq_install_handler(int irq, void (*handler)(registers_t *r));
void irq_uninstall_handler(int irq);
void irq_install();
void irq_handler(registers_t *r);

#endif// myos/kernel/idt.h
#ifndef IDT_H
#define IDT_H

#include "types.h"

// Defines a single entry in the Interrupt Descriptor Table (a "gate")
struct idt_entry_struct {
   uint16_t base_low;    // The lower 16 bits of the handler function's address
   uint16_t selector;    // The GDT code segment selector to use
   uint8_t  always0;     // This must always be zero
   uint8_t  flags;       // The gate type and attributes
   uint16_t base_high;   // The upper 16 bits of the handler function's address
} __attribute__((packed));


// Defines the structure for the IDT pointer, which is loaded using the 'lidt' instruction
struct idt_ptr_struct {
   uint16_t limit;       // The size of the IDT in bytes minus 1
   uint32_t base;        // The linear address where the IDT starts
} __attribute__((packed));

void idt_set_gate(uint8_t num, uint32_t base, uint16_t selector, uint8_t flags);
void idt_install();

#endif// myos/kernel/vga.c

#include "vga.h"
#include "io.h"
#include "types.h"

// Define a static cursor position
static int cursor_row = 0;
static int cursor_col = 0;

// Define the VGA buffer as a global, constant pointer to a volatile memory region.
volatile unsigned short* const VGA_BUFFER = (unsigned short*)0xB8000;

// Clear the screen by filling it with spaces
void clear_screen() {
    int i;
    for (int i = 0; i < 80 * 25; i++) {
        VGA_BUFFER[i] = (unsigned short)' ' | 0x0F00;
    }
    cursor_row = 0;
    cursor_col = 0;
    update_cursor(cursor_row, cursor_col);
}

// Updates the VGA cursor's position.
void update_cursor(int row, int col) {
    unsigned short position = (row * 80) + col;

    // Send the high byte of the cursor position
    port_byte_out(0x3D4, 0x0E);
    port_byte_out(0x3D5, (unsigned char)(position >> 8));
    // Send the low byte of the cursor position
    port_byte_out(0x3D4, 0x0F);
    port_byte_out(0x3D5, (unsigned char)(position & 0xFF));
}

void print_char(char c) {
    // Handle backspace
    if (c == '\b') {
        // Only backspace if the cursor isn't at the very beginning.
        if (cursor_col > 0) {
            cursor_col--;
        } else if (cursor_row > 0) {
            cursor_row--;
            cursor_col = 79; // Move to the end of the previous line.
        }
        // Write a blank space to the current cursor position to 'erase' the char.
        VGA_BUFFER[(cursor_row * 80) + cursor_col] = ' ' | 0x0F00;

    // Handle newline
    } else if (c == '\n') {
        cursor_row++;
        cursor_col = 0;
    } else {
        // Handle a normal character.
        VGA_BUFFER[(cursor_row * 80) + cursor_col] = (VGA_BUFFER[(cursor_row * 80) + cursor_col] & 0xFF00) | c;
        cursor_col++;
    }

    // If we're at the end of the line, wrap to the next line.
    if (cursor_col >= 80) {
        cursor_col = 0;
        cursor_row++;
    }
    // scrolling logic when cursor_row >= 25
    if (cursor_row >= 25) {
        // Move the text of every line up by one row.
        for (int i = 0; i < 24 * 80; i++) {
            VGA_BUFFER[i] = VGA_BUFFER[i + 80];
        }

        // Clear the last line.
        for (int i = 24 * 80; i < 25 * 80; i++) {
            VGA_BUFFER[i] = ' ' | 0x0F00;
        }
        
        // Set the cursor to the beginning of the last line.
        cursor_row = 24;
    }

    // Update the hardware cursor's position.
    update_cursor(cursor_row, cursor_col);
}

void print_string(const char* str) {
    int i = 0;
    while (str[i] != '\0') {
        print_char(str[i]);
        i++;
    }
}

void print_hex(uint32_t n) {
    print_string("0x");
    for (int i = 28; i >= 0; i -= 4) {
        uint32_t nibble = (n >> i) & 0xF;
        nibble += nibble > 9 ? 0x37 : 0x30;
        print_char((char)nibble);
    }
}// myos/kernel/timer.c

#include "timer.h"
#include "irq.h"
#include "io.h"
#include "vga.h" // For printing output

static uint32_t tick = 0;

// The handler that is called on every timer interrupt (IRQ 0).
static void timer_handler(registers_t *r) {
    tick++; // This is all the handler should do
}

// Configures the PIT and installs the timer handler.
void timer_install() {
    // 1. Install the handler for IRQ 0
    irq_install_handler(0, timer_handler);

    // 2. Configure the PIT
    uint32_t frequency = 100; // Target frequency in Hz
    uint32_t divisor = 1193180 / frequency;

    // Send the command byte to the PIT command port.
    // Command 0x36 means: Channel 0, Access lo/hi, Mode 3 (square wave).
    port_byte_out(0x43, 0x36);

    // Send the frequency divisor, low byte then high byte.
    port_byte_out(0x40, (uint8_t)(divisor & 0xFF));
    port_byte_out(0x40, (uint8_t)((divisor >> 8) & 0xFF));
}// myos/kernel/types.h
#ifndef TYPES_H
#define TYPES_H

// Define fixed-width integer types for cross-platform compatibility
typedef unsigned char   uint8_t;
typedef unsigned short  uint16_t;
typedef unsigned int    uint32_t;
typedef unsigned long long uint64_t;

#endif// myos/kernel/timer.h

#ifndef TIMER_H
#define TIMER_H

// Initializes the PIT and registers its IRQ handler.
void timer_install();

#endif// myos/kernel/shell.c

#include "shell.h"
#include "vga.h" // We need this for print_char

#define PROMPT "PGOS> "
#define MAX_CMD_LEN 256

// A buffer to store the command being typed.
static char cmd_buffer[MAX_CMD_LEN];
// The current position in the command buffer.
static int cmd_index = 0;

// Initialize the shell.
void shell_init() {
    // Print the prompt when the shell starts.
    print_string(PROMPT);
}

// This function is called by the keyboard driver for each keypress.
void shell_handle_input(char c) {
    // If the user pressed Enter
    if (c == '\n') {
        print_char(c); // Echo the newline
        
        // For now, we don't process the command. Just reset the buffer.
        cmd_buffer[cmd_index] = '\0';
        cmd_index = 0;
        
        // Print the prompt for the next command
        print_string(PROMPT);
        
    // If the user pressed Backspace
    } else if (c == '\b') {
        if (cmd_index > 0) {
            // Go back one character in the buffer and on the screen.
            cmd_index--;
            print_char(c);
        }

    // For any other printable character
    } else if (cmd_index < MAX_CMD_LEN - 1) {
        // Add the character to the buffer and echo it to the screen.
        cmd_buffer[cmd_index++] = c;
        print_char(c);
    }
}/* myos/kernel/linker.ld */
ENTRY(_start)

SECTIONS {
    . = 0x10000; /* Kernel starts at 1MB */

    .text : {
        *(.text)
    }

    .rodata : {
        *(.rodata)
    }

    .data : {
        *(.data)
    }

    bss_start = .;
    .bss : {
        *(.bss)
    }
    bss_end = .;

    /* This section prevents the "executable stack" warning and cleans up output */
    /DISCARD/ : {
        *(.note.GNU-stack)
        *(.eh_frame)
    }
}# myos/Makefile
# A robust and scalable Makefile for myos

# Tell Make that these are not real files
.PHONY: all clean run

# --- Variables ---
BUILD_DIR := build
QEMU_CMD := qemu-system-i386
QEMU_OPTS := -fda $(BUILD_DIR)/os_image.bin -debugcon stdio

# --- Source Files ---
BOOT_SRC := boot/bootloader.asm
# Separate kernel_entry.asm so we can control its link order
KERNEL_ENTRY_SRC := kernel/kernel_entry.asm
KERNEL_ASM_SRC := $(filter-out $(KERNEL_ENTRY_SRC), $(wildcard kernel/*.asm))
KERNEL_C_SRC := $(wildcard kernel/*.c)

# --- Object Files ---
BOOT_OBJ := $(BUILD_DIR)/bootloader.bin
KERNEL_ENTRY_OBJ := $(patsubst kernel/%.asm, $(BUILD_DIR)/%.o, $(KERNEL_ENTRY_SRC))
KERNEL_ASM_OBJ := $(patsubst kernel/%.asm, $(BUILD_DIR)/%.o, $(KERNEL_ASM_SRC))
KERNEL_C_OBJ := $(patsubst kernel/%.c, $(BUILD_DIR)/%.o, $(KERNEL_C_SRC))
ALL_KERNEL_OBJS := $(KERNEL_ASM_OBJ) $(KERNEL_C_OBJ)

# --- Final Binaries ---
KERNEL_ELF := $(BUILD_DIR)/kernel.elf
KERNEL_BIN := $(BUILD_DIR)/kernel.bin
DISK_IMAGE := $(BUILD_DIR)/os_image.bin

# --- Toolchain Flags ---
ASM := nasm
ASM_FLAGS := -f elf32 -F dwarf
CC := gcc
CFLAGS := -m32 -ffreestanding -nostdlib -fno-pie -fno-stack-protector -g -c
LD := ld
LDFLAGS := -m elf_i386 -T kernel/linker.ld
OBJCOPY := objcopy
OBJCOPY_FLAGS := -O binary

# --- Build Targets ---

# Default target: build everything
all: $(DISK_IMAGE)

# Rule to create the final disk image
$(DISK_IMAGE): $(BOOT_OBJ) $(KERNEL_BIN)
	@echo "Creating disk image: $@"
	@dd if=/dev/zero of=$@ bs=512 count=2880 >/dev/null 2>&1
	@dd if=$(BOOT_OBJ) of=$@ bs=512 seek=0 conv=notrunc >/dev/null 2>&1
	@dd if=$(KERNEL_BIN) of=$@ bs=512 seek=1 conv=notrunc >/dev/null 2>&1

# Rule to link all kernel objects into a single ELF file
# KERNEL_ENTRY_OBJ is listed first to ensure correct linking.
$(KERNEL_ELF): $(KERNEL_ENTRY_OBJ) $(ALL_KERNEL_OBJS)
	$(LD) $(LDFLAGS) -o $@ $^
	@echo "Kernel linked: $@"

# Rule to extract the raw binary from the ELF file
$(KERNEL_BIN): $(KERNEL_ELF)
	$(OBJCOPY) $(OBJCOPY_FLAGS) $< $@
	@echo "Kernel extracted to binary: $@"
	@echo -n "Kernel size: "
	@stat -c %s $@

# Rule to build the bootloader (special case, not an ELF object)
$(BOOT_OBJ): $(BOOT_SRC)
	@mkdir -p $(BUILD_DIR)
	$(ASM) $< -f bin -o $@

# Generic rule to compile any C source file to an object file
$(BUILD_DIR)/%.o: kernel/%.c
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) $< -o $@

# Generic rule to assemble any kernel assembly file to an object file
$(BUILD_DIR)/%.o: kernel/%.asm
	@mkdir -p $(BUILD_DIR)
	$(ASM) $(ASM_FLAGS) $< -o $@

# Rule to run QEMU
run: $(DISK_IMAGE)
	@echo "Running OS in QEMU..."
	$(QEMU_CMD) $(QEMU_OPTS)

# Rule to clean up all build artifacts
clean:
	@echo "Cleaning build directory..."
	rm -rf $(BUILD_DIR)